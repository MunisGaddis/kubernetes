🌱 KIND Cluster Setup Guide

What is KinD?
KinD (Kubernetes in Docker) is an open-source tool designed to enable running Kubernetes clusters locally using 
Docker container “nodes.” KinD is especially useful for testing, CI/CD workflows, and temporary clusters where 
you need an environment similar to a full-fledged Kubernetes cluster but don’t need all the bells and whistles 
that come with it. KinD is quick to set up and tear down, making it ideal for various development and testing scenarios.

Create and run this install script:

#!/bin/bash
# Install KIND
if [ "$(uname -m)" = "x86_64" ]; then
  curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.27.0/kind-linux-amd64
  chmod +x ./kind
  sudo mv ./kind /usr/local/bin/kind
fi

# Install kubectl
VERSION="v1.33.1"
URL="https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl"
INSTALL_DIR="/usr/local/bin"

curl -LO "$URL"
chmod +x kubectl
sudo mv kubectl $INSTALL_DIR/

# Verify kubectl installation
kubectl version --client

# Cleanup
rm -f kubectl
rm -rf kind

echo "✅ KIND & kubectl installation complete."
***********************************************************************************************
2️⃣ Set up KIND Cluster
📄 Create kind-cluster-config.yaml

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
    image: kindest/node:v1.33.1
  - role: worker
    image: kindest/node:v1.33.1
  - role: worker
    image: kindest/node:v1.33.1
**************************************************************************************************************
▶ Create the cluster
kind create cluster --config kind-cluster-config.yaml --name tws

▶ Verify cluster
kubectl get nodes
kubectl cluster-info

3️⃣ Access the Cluster
kubectl cluster-info

Test the Cluster:
kubectl get nodes
kubectl config view
kubectl get pods
kubectl get replicaset
kubectl get deployments
kubectl get services
*********************************************************************************************************************************************
Install Metrics Server 
Apply the customized Metrics Server deployment:

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

🧹 Delete the entire manifest:
kubectl delete -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

🔧 Patch the deployment to allow insecure TLS (required for Kind):

kubectl patch deployment metrics-server -n kube-system \
  --type='json' \
  -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]'

🧪 Step 3: Test Metrics Server
Wait for the metrics-server pod to be ready:
kubectl get pods -n kube-system
After a few seconds/minutes, test metrics with:
kubectl top nodes
kubectl top pods --all-namespaces

or add manually
kubectl -n kube-system edit deployment metrics-server
Add the security bypass to deployment under container.args
- --kubelet-insecure-tls
Restart the deployment
kubectl -n kube-system rollout restart deployment metrics-server
Verify if the metrics server is running
kubectl get pods -n kube-system
kubectl top nodes
**************************************************************************************************************
✅ 1. Delete All Kind Clusters

for cluster in $(kind get clusters); do
  kind delete cluster --name "$cluster"
done

✅ 2. Remove Dangling Docker Resources (containers, networks, volumes)
⚠️ Be careful — this removes unused resources globally!

docker system prune -a --volumes -f
-a: removes all unused images (not just dangling ones)
--volumes: includes unused volumes
-f: skips confirmation prompt

✅ 3. (Optional) Check if Any Kind Networks Remain

docker network ls | grep kind
If any remain:
docker network rm kind
After this, your system will be clean of all Kind clusters and Docker leftovers.



