git clone https://github.com/LondheShubham153/full-stack_chatApp.git
cd full-stack_chatApp
cd backend
build image :- docker build -t monudocker334/chatapp-backend:latest .
push to dockerhub :- docker push monudocker334/chatapp-backend:latest
cd frontend
build image :- docker build -t monudocker334/chatapp-frontend:latest .
push to dockerhub :- docker push monudocker334/chatapp-frontend:latest

Create folder k8s
cd k8s
create backend deployment ans service 
******************************************************************************************************
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: chat-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      name: backend-pod
      namespace: chat-app
      labels:
        app: backend
    spec:
      containers:
      - name: chatapp-backend
        image: monudocker334/chatapp-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5001
        env:
        - name: NODE_ENV
          value: production
        - name: MONGODB_URI
          value: "mongodb://mongoadmin:secret@mongodb:27017/dbname?authSource=admin"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: chatapp-secrets
              key: jwt
        - name: PORT
          value: "5001"
        readinessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 15
          periodSeconds: 20
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: chat-app
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
  - port: 5001
    targetPort: 5001
*************************************************************************************************************
kubectl apply -f backend-deployment.yml
kubectl get pods -n chat-app
**************************************************************************************************************
Now create Frontend and service yml
  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: chat-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: chatapp-frontend
        image: monudocker334/chatapp-frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: production
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: chat-app
spec:
  type: NodePort # Use ClusterIP if you don't want external access
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
******************************************************************************************************************************
  kubectl apply -f frontend-deployment.yml
  kubectl get pods -n chat-app
******************************************************************************************************************************
Now create mongo deployment, PVC, PV and Service

# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  namespace: chat-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: chatapp-mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: mongoadmin
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: secret
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
      volumes:
      - name: mongo-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: chat-app
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
---
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: chat-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Persistent Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 5Gi
  hostPath:
    path: /data
********************************************************************************************************************************
create ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chatapp-ingress
  namespace: chat-app
  labels:
    name: chatapp-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: chat-tws.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: frontend
            port:
              number: 80
      - pathType: Prefix
        path: "/api"
        backend:
          service:
            name: backend
            port:
              number: 5001
**************************************************************************************************************
 create secrets.yml
apiVersion: v1
kind: Secret
metadata:
  name: chatapp-secrets
  namespace: chat-app
type: Opaque
data:
  jwt: ZXlKaGJHY2lPaUpJVXpJMU5pSjkuZXlKU2IyeGxJam9pUVdSdGFXNGlMQ0pKYzNOMVpYSWlPaUpKYzNOMVpYSWlMQ0pWYzJWeWJtRnRaU0k2SWtwaGRtRkpibFZ6WlNJc0ltVjRjQ0k2TVRjek5EUXpPREEyTml3aWFXRjBJam94TnpNME5ETTRNRFkyZlEuY0t6NXYzNm9yZ>

***************************************************************************************************************************************************************
