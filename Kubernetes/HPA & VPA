In Kubernetes, HPA (Horizontal Pod Autoscaler) and VPA (Vertical Pod Autoscaler) are mechanisms for 
automatically adjusting the resource usage of your workloads based on usage metrics.

ðŸŒ€ Horizontal Pod Autoscaler (HPA)
Purpose: Automatically scales the number of pod replicas up or down based on observed CPU/memory utilization or custom metrics.

âœ… Key Features:
Works by adding/removing pods.
Best for stateless applications.
Supports metrics from CPU, memory, and custom metrics (via Prometheus or other adapters)
*****************************************************************************************************************
We need metrics server for HPA
Install Metrics Server 
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl -n kube-system edit deployment metrics-server
Add the security bypass to deployment under container.args
- --kubelet-insecure-tls
Restart the deployment
kubectl -n kube-system rollout restart deployment metrics-server
Verify if the metrics server is running
kubectl get pods -n kube-system
kubectl top nodes
****************************************************************************************************
nano apache-deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-deployment
  labels:
    app: apache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apache
  template:
    metadata:
      labels:
        app: apache
    spec:
      containers:
      - name: apache
        image: httpd:2.4
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: apache-service
  labels:
    app: apache
spec:
  selector:
    app: apache
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
kubectl apply -f apache-deployment.yml
******************************************************************************************************************

We can implement HPA in online-shop app
nano hpa.yml

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: online-shop-hpa
  namespace: online-shop
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: online-shop-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50

kubectl apply -f hpa.yml
*********************************************************************************************************************
ðŸ§  Vertical Pod Autoscaler (VPA)
Purpose: Automatically adjusts CPU and memory requests/limits for your pods based on usage.

âœ… Key Features:
Helps optimize resource requests to prevent over/under-provisioning.
Useful for stateful or long-running jobs.
Requires pod restart to apply new recommendations (may cause downtime).

ðŸ›  VPA Modes:
Off: Only records recommendations.
Initial: Applies recommendations when pod is first created.
Auto: Automatically updates pods (kills and restarts them with new values).
**********************************************************************************************************************
git clone https://github.com/kubernetes/autoscaler.git
cd autoscaler/vertical-pod-autoscaler
cd hack
./hack/vpa-up.sh
kubectl get pods -n kube-system
***********************************************************************************************************************
nano vpa.yml
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: apache-vpa
  namespace: default
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: apache-deployment
  updatePolicy:
    updateMode: "Auto" # Options: "Off", "Initial", "Auto"

kubectl apply -f vpa.yml
********************************************************************************************************************
