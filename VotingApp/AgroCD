DevOps Project on Kubernetes With ArgoCD

kubectl create namespace argocd

Installing Argo CD
Create a namespace for Argo CD:
kubectl create namespace argocd

Apply the Argo CD manifest:
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl get pods -n argocd

Check services in Argo CD namespace:
kubectl get svc -n argocd

argocd running on Docker container so change clusterIP to NodePort

Expose Argo CD server using NodePort:
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

Check if ClusterIP changed to NodePort

Forward ports to access Argo CD server:
kubectl port-forward -n argocd service/argocd-server 8443:443 &

check in browser : http://localhost:8443


To login into Argocd :
Username : admin
Password: 

To get ArgoCD initial Admin Password
kubectl get secret -n argocd argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo

Click on New App
Type Application name : voting-app
Project Name : Default
Sync Policy :- Automatic
Tick Prune Resources and Self Heal
Repository URL :- https://github.com/LondheShubham153/k8s-kind-voting-app.git
Branches : Type branch name in github repo

Now paste path where kubernetes manifest files are stored
Path : for example in my github path is k8s-specifications

Source code will deploy on Kube cluster
https://kubernetes.default.svc
namespace : default

Click on create

Now if I want to set replicas to 1 then go to github then k8s-specifications---in any deployment change replicas to 1 or 10 in manifest file and commit changes and refresh in argocd
Now in kubenetes type kubectl get pods -n argocd and check number of pods

Now I want to see result and vote in browser
Type kubectl get svc

if using local VM
kubectl port-forward svc/vote 5000:5000 &

Run command if using AWS VM
kubectl port-forward svc/vote 5000:5000 --address=0.0.0.0 &

if using local VM
kubectl port-forward svc/result 5001:5001 &

Run command if using AWS VM
kubectl port-forward svc/result 5000:5000 --address=0.0.0.0 &

check in browser in local VM : 
https://localhost:5000 & https://localhost:5001

Now Install kubernetes dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

we need to create yml for admin-user

nano dashboard.yml 

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard

kubectl apply -f dashboard.yml

we need to port forward in order to run dashboard in kubernetes

kubectl get svc -n kubernetes-dashboard : running on 443

if using local VM
kubectl port-forward svc/kubernetes-dashboard -n kubernetes-dashboard 8080:443 &

if using AWS Instance
kubectl port-forward svc/kubernetes-dashboard -n kubernetes-dashboard 8080:443 --address:0.0.0.0 &

Now create token
kubectl -n kubernetes-dashboard create token admin-user

now check browser https:localhost:8080 

Enter token and access dashboard

************************************************************************************************************************
Delete the Argo CD Resources

Run this command to delete all the Argo CD components that were installed via the manifest:

kubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

üóëÔ∏è Step 2: Delete the argocd Namespace (optional)
If you want to remove all resources (including secrets, services, config maps, etc.) and the namespace itself:

kubectl delete namespace argocd
*************************************************************************************************************************
‚úÖ Confirm Removal
You can verify everything is gone by running:

kubectl get all -n argocd
No resources found in argocd namespace.

And to confirm CRDs are gone:
kubectl get crds | grep argoproj.io

***************************************************************************************************************************
