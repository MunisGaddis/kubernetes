Secrets & ConfigMaps
Secrets are used to store sensitive information, such as:

Passwords
OAuth tokens
SSH keys
TLS certificates

Key Features:
Stored Base64-encoded (not encrypted by default in etcd unless configured).
Mounted as files or injected as environment variables.
******************************************************************************
Suppose we need to run mysql docker container
Create mkdir mysql
cd mysql

nano deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-dep
  namespace: mysql
  labels:
    app: mysql
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      name: mysql-pod
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          ports:
            - containerPort: 3306
Save File 
***********************************************************************************
Create namespace mysql

apiVersion: v1
kind: Namespace
metadata:
  name: mysql

kubectl apply -f namespace.yml
kubectl apply -f deployment.yml
kubectl get pods -n mysql
if we receive any error do describe and check logs
kubectl describe pod/mysql -n mysql
kubectl logs pod/mysql -n mysql
************************************************************************************
We need to specify MYSQL password so create secret.yml

nano secret.yml
kind: Secret
apiVersion: v1
metadata:
   name: mysql-secret
   namespace: mysql
   
type: opaque    
data:
  password: # base64 encoded password
  
  save 
  
Run command :- echo -n "Admin123" | base64
 
kubectl apply -f secrets.yml
kubectl get secrets -n mysql

Now go to deployment.yml and give environment variable
Add below yml under deployment containerPort
env:
  - name: MYSQL_ROOT_PASSWORD
    valueFrom:
    secretKeyRef: 
      name: mysql-secret
      key: password
      
kubectl get deployment -n mysql
Delete deployment as it has errors
kubectl delete deployment mysql-dep -n mysql
kubectl apply -f deployment.yml
kubectl get pods -n mysql

Now I want to create database in mysql
add env in deployment

- name: MYSQL_Database
  value: myDB
  
  if we need database in configMap

ConfigMaps are used to store non-sensitive configuration data, such as:

Application properties
Command-line arguments
Environment variables

Key Features:
Ideal for externalizing application config.
Can be mounted as volumes or injected as environment variables.
create nano configmap.yml

  kind: ConfigMap
  apiVersion: v1
  metadata:
     name: mysql-config-map
     namespace: mysql
     
 data:
   database: myDB
   
kubectl apply -f configmap.yml
nano deployment.yml

- name: MYSQL_DATABASE
      valueFrom:
        configMapKeyRef:
           name: mysql-config-map
           key: database
kubectl apply -f deploymemt.yml
kubectl get pods -n mysql

Go inside Pod :
kubectl exec -it pod name -n mysql --bash
mysql -u root -p
Enter Pasword : Admin123
show databases;
