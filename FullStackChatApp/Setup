3 Tier Full stack chat app

git clone https://github.com/LondheShubham153/full-stack_chatApp.git
cd full-stack_chatApp
cd backend
build image :- docker build -t monudocker334/chatapp-backend-k8s:latest .
push to dockerhub :- docker push monudocker334/chatapp-backend-k8s:latest
cd frontend
build image :- docker build -t monudocker334/chatapp-frontend-k8s:latest .
push to dockerhub :- docker push monudocker334/chatapp-frontend-k8s:latest

rm -rf * 
docker system prune -a
*********************************************************************************
cd k8s
kubectl apply -f namespace.yml
kubectl apply -f mongo-pvc.yml -n chat-app
kubectl apply -f backend-secrets.yml -n chat-app
kubectl apply -f frontend-configmap.yml -n chat-app
kubectl apply -f mongodb-deployment.yml -n chat-app
kubectl apply -f mongodb-service.yml -n chat-app

# Wait for MongoDB pod to be ready
kubectl wait --for=condition=Ready pods -l app=mongodb -n chat-app --timeout=120s

kubectl apply -f backend-deployment.yaml -n chat-app
kubectl apply -f backend-service.yaml -n chat-app

# Wait for Backend pod to be ready
kubectl wait --for=condition=Ready pods -l app=backend -n chat-app --timeout=120s

# Deploy Frontend
kubectl apply -f frontend-deployment.yaml -n chat-app
kubectl apply -f frontend-service.yaml -n chat-app

# Wait for Frontend pod to be ready
kubectl wait --for=condition=Ready pods -l app=frontend -n chat-app --timeout=120s

Once the app is deployed, it's crucial to verify that everything is running smoothly.
Check NodeIP:PORT on browser in Ubuntu VM Local

# Check all resources
kubectl get all -n chat-app

# Check pod logs if needed
kubectl logs -f -l app=frontend -n chat-app
kubectl logs -f -l app=backend -n chat-app
kubectl logs -f -l app=mongodb -n chat-app

## Accessing the Application

The application is exposed through NodePort services:
http://localhost:8080

You can verify the service URLs using:

# Get service details
kubectl get svc -n chat-app

Describe a Pod

If a pod isnâ€™t working as expected, you can describe it to get more information:
kubectl describe pod <pod-name> -n chat-app
********************************************************************************************
kubectl delete all --all -n chat-app
This will delete:

All Pods
All Services
All Deployments
All ReplicaSets
Everything managed by kubectl get all
