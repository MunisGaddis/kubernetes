git clone https://github.com/Aakibgithuber/Three-tier-Application-Deployment-.git

cd Three-tier-Application-Deployment-
cd backend 
docker build -t monudocker334/3tier-backend-k8s:latest
docker push monudocker334/3tier-backend-k8s:latest

cd frontend
docker build -t monudocker334/3tier-frontend-k8s:latest
docker push monudocker334/3tier-frontend-k8s:latest

docker rmi image name
******************************************************************************************
cd to k8s_manifests
kubectl apply -f .

or apply one by one 

# 1. Apply secrets first (if deployments depend on them)
kubectl apply -f secrets.yaml

# 2. Apply deployments (this can be separate backend/frontend or combined)
kubectl apply -f backend-deployment.yaml
kubectl apply -f frontend-deployment.yaml
kubectl apply -f deploy.yaml  # If this is a combined or additional deployment

# 3. Apply services
kubectl apply -f backend-service.yaml
kubectl apply -f frontend-service.yaml
kubectl apply -f service.yaml  # If this is a LoadBalancer or another service

Change the Service to NodePort (Quick Access)
This will make your frontend accessible using the Node's IP and a specific port.

kubectl patch service frontend -n workshop -p '{"spec": {"type": "NodePort"}}'
Then check the assigned port:
kubectl get service frontend -n workshop

In this case, your app would be accessible at:
http://<NodeIP>:31234

You can get the Node's IP using:
kubectl get nodes -o wide

Use Port Forwarding (Quick, Temporary)
Run this command to access localhost:port
kubectl port-forward service/frontend 3000:3000 -n workshop
Then open:
http://localhost:3000
***************************************************************************************************
You can delete all the resources in the workshop namespace using this command:

kubectl delete all --all -n workshop
This will delete:

All Pods
All Services
All Deployments
All ReplicaSets
Everything managed by kubectl get all
*******************************************************************************************************
Deploying a Three-tier Application LIVE on AWS EKS
Create AWS Instance
Install docker : sudo apt install docker.io -y
type whoami
echo $USER
sudo chown $USER /var/run/docker.sock

git clone https://github.com/LondheShubham153/TWSThreeTierAppChallenge

cd TWSThreeTierAppChallenge
cd Application-code

cd frontend
docker build -t monudocker334/3tier-frontend:latest
docker run -d -p 3000:3000 monudocker334/3tier-frontend:latest
Add 3000 port in Security Groups - Inbound Rules
Access App : PublicIP:3000
docker push monudocker334/3tier-frontend:latest
Push Image to Amazon ECR
Create IAM user 
Access Administrator
aws configure
enter access key 


cd backend 
docker build -t monudocker334/3tier-backend:latest
docker push monudocker334/3tier-backend:latest


