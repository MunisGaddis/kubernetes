Deploying the Spring Pet Clinic App in Kubernetes.
git clone https://github.com/subha-devops-design/petclinic-app.git
build image :- docker build -t monudocker334/petclinic-app-k8s:latest .
push to dockerhub :- docker push monudocker334/petclinic-app-k8s:latest

kubectl create namespace dev
Set as dev namespace as default namespace:
kubectl config set-context --current --namespace=dev
**********************************************************************
kubectl apply -f mysql-deployment.yml
kubectl get all -n dev
kubectl exec -it mysql-db-7d8cf944c-wbqgb -n dev -- /bin/sh
mysql -u root -p
SHOW DATABASES;
USE petclinic;
SHOW TABLES;
SELECT * FROM owners;
exit
*****************************************************************************
kubectl apply -f petclinic-app-deployment.yml
kubectl get all -n dev

Check Logs for Database Connectivity:
It is crucial to ensure that the PetClinic application has connected to the MySQL database.
kubectl logs <petclinic-pod-name>

Inside the PetClinic pod, use nslookup to verify DNS resolution:
kubectl exec -it <petclinic-pod-name> -- nslookup <mysql-service-name>

Ensure the MySQL Service is Running:
The MySQL service is responsible for allowing the PetClinic application to connect to the database.
kubectl get svc

Check Service Endpoints:
Ensure that Kubernetes is routing traffic correctly between the PetClinic app and MySQL
kubectl get endpoints <mysql-service-name>

Monitor Resources:
Ensure that both MySQL and the PetClinic app are not consuming excessive resources.
Check pod resource usage:
kubectl top pod

Access the Spring PetClinic application using the NodePort URL http://<node-ip>:30007.
Find Owners Page and details of a particular Owner:
Add a new Owner and adding Pets to him:
Now you can check in MySQL shell that new user has been added or not:
SELECT * FROM owners;
SELECT * FROM pets;
kubectl delete -f .
*****************************************************************************************************************
You can delete all the resources in the workshop namespace using this command:

kubectl delete all --all -n dev
This will delete:

All Pods
All Services
All Deployments
All ReplicaSets
Everything managed by kubectl get all
