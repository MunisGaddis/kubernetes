git clone https://github.com/techiescamp/kubernetes-projects.git
*******************************************************************************************
Step 1: Build a Custom Docker Image of WordPress
Step 2: Push the image to DockerHub
Step 3: Create a Namespace
Step 4: Create Secret
Step 5: Create ConfigMap
Step 6: Deploy MySQL Database
Step 7: Deploy WordPress
Step 8: Create a NetworkPolicy
Step 9: Log in to WordPress UI
Step 10: Clean Up the Setup
********************************************************************************************
kubectl create ns wordpress

Run the following command to set the WordPress namespace as the default namespace.
kubectl config set-context --current --namespace=wordpress

kubectl apply -f secret.yaml
kubectl get secret

Run the following command to create configmap for Nginx
kubectl apply -f nginx-cm.yaml

Run the following command to create configmap for MySQL
kubectl apply -f mysql-cm.yaml
kubectl get cm

Run the following command to deploy MySQL and its service
kubectl apply -f mysql.yaml

Run the following commands to check if the MySQL StatefulSet and its service is deployed
kubectl get sts
kubectl get svc

Run the following command to deploy the WordPress.
kubectl apply -f wordpress.yaml
  
Run the following commands to check if the WordPress deployment and its service is deployed.
kubectl get deploy
kubectl get svc

WordPress and MySQL have been created, check the status of PVC and PV using the following commands
kubectl get pvc
kubectl get pv

Run the following command to deploy the NetworkPolicy.
kubectl apply -f networkpolicy.yaml

kubectl port-forward svc/wordpress-service 8080:80 --address=0.0.0.0 &

Allow 8080 port in Aws Inbound Rules under Security
Access Application :- Public IP:Port

To check if the NetworkPolicies are created, run the following command
kubectl get netpol

Delete All resources
kubectl delete -f .
